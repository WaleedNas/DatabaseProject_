@page "/view/{BookId:int}"
@using DatabaseProject_.Util
@inject NavigationManager navManager
@inject IUserData userData
@inject IBookData bookData
@inject IOrderData orderData
@inject IOrderItemData orderItemData
@inject IJSRuntime JS

<PageTitle>Shop</PageTitle>

<section class="shop_section layout_padding">
    <div class="container">
        @if (Book != null)
        {
            <div class="box">
                <div style="width: 50%; display: inline;">
                    <div class="heading_container heading_center">
                        <h2>
                            @Book.Title
                        </h2>
                    </div>
                    <p>@Book.Description</p>
                    <p>@Book.PublicationDate</p>
                    <p>@Book.Publisher</p>
                    <p>AED @Book.Price</p>
                </div>
                <div class="img-box">
                    <img src=@ImageConverter.BytesToSrc(Book.CoverImage) alt="Book Cover">
                </div>
            </div>
        }
        <div>
            <div class="btn-box">
                <a style="cursor: pointer;" onclick="@HandleAdd" hidden="@IsAdded">
                    Add To Cart
                </a>
            </div>
            <div class="btn-box">
                <a href=@($"/cart/{UserId}") style="cursor: pointer; background-color: green; color: white;" hidden="@(!IsAdded)">
                    Added ✓
                </a>            
            </div>
        </div>
    </div>
</section>

@code {

    [Parameter]
    public int BookId { get; set; }

    public int UserId { get; set; }

    public Book Book { get; set; }

    private bool IsLoggedIn { get; set; }

    private bool IsAdded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Book = await bookData.GetBook(BookId);

            var uri = new Uri(navManager.Uri);

            var queryString = uri.Query;

            if (!string.IsNullOrWhiteSpace(queryString) &&
                int.TryParse(queryString[1..], out var id) && id != 0)
            {
                IsLoggedIn = true;
                UserId = id;
            }

        }
        catch (Exception e)
        {
        }
    }

    private async void HandleAdd()
    {
        if(!IsLoggedIn)
            navManager.NavigateTo("/login");
        else
        {
            var orders = new List<Order>();
            try
            {
                orders = (await orderData.GetOrdersByUser(UserId)).ToList();

                if (orders.All(o => o.Status != OrderStatus.Pending))
                    throw new OrderData.OrderNotFoundException();
            }
            catch (OrderData.OrderNotFoundException e)
            {
                var order = new Order()
                {
                    OrderDate = DateTime.Now,
                    Status = OrderStatus.Pending,
                    TotalPrice = Book.Price,
                    UserId = UserId
                };

                order.OrderId = await orderData.InsertOrder(order);

                orders.Add(order);
            }

            foreach (var order in orders)
            {
                // The order wasn't bought yet (i.e it is a cart)
                if (order.Status != OrderStatus.Pending) continue;

                await orderItemData.InsertOrderItem(new OrderItem()
                {
                    BookId = BookId,
                    OrderId = order.OrderId,
                    Quantity = 1
                });

                IsAdded = true;
                StateHasChanged();

                break;
            }
        }
    }

}
