@page "/AdminAuthor"
@inject NavigationManager navManager
@inject IUserData userData
@inject IBookData bookData
@inject IAuthorData authorData
@inject IOrderData orderData
@inject IJSRuntime JS

<PageTitle>VBStore</PageTitle>
@if (notAdmin)
{
    <h1>Unauthorized Access</h1>
}
else
{
    <h1>Authors</h1>

    <p>
        <NavLink style="margin:10px 0 20px 0" class="btn btn-primary" @onclick="HandleCreatePage">Add Author</NavLink>
        <NavLink style="color:#040404; margin-left:70rem" class="btn btn-link" @onclick="HandleAdminPage">Users</NavLink>
        <NavLink style="color:#040404;" class="btn btn-link" @onclick="HandleBookPage">Books</NavLink>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>
                    First Name
                </th>
                <th>
                    Last Name
                </th>
                <th>
                    Description
                </th>


                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in authors)
            {
                <tr>
                    <td style="width: 50%">
                        @author.FirstName
                    </td>
                    <td>
                        @author.LastName
                    </td>
                    <td>
                        @author.Description
                    </td>
                    <td>
                        <NavLink class="btn btn-primary" @onclick="() => HandleEdit(author.AuthorId)">Edit</NavLink> |
                        <NavLink class="btn btn-primary" @onclick="() => HandleDetails(author.AuthorId)">Details</NavLink> |
                        <NavLink class="btn btn-danger" @onclick="() => HandleDelete(author.AuthorId)">Delete</NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}


@code {

    int Id;
    bool notAdmin = false;
    List<Author> authors = new List<Author>();
    User admin = new User();

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);

        var queryString = uri.Query;

        if (!string.IsNullOrWhiteSpace(queryString))
        {
            Id = int.Parse(queryString.Substring(1));
        }

        try
        {
            admin = await userData.GetUser(Id);
        }
        catch (Exception e)
        { }

        if (admin.UserType != UserType.Admin)
        {
            notAdmin = true;
        }

        IEnumerable<Author> authorList = await authorData.GetAuthors();
        authors = authorList.ToList();
    }

    private void HandleEdit(int id)
    {
        navManager.NavigateTo("/AuthorEdit?" + admin.UserId + "+" + id);
    }
    private async Task HandleDelete(int id)
    {

        try
        {
            var _Books = await bookData.GetBooksByAuthor(id);
            foreach (var book in _Books)
            {
                await bookData.DeleteBook(book.BookId); 
            }
            var response = await authorData.DeleteAuthor(id);

            authors = authors.Where(author => author.AuthorId != id).ToList();

            // Manually trigger component render
            StateHasChanged();

        } catch (Exception e)
        {
            await JS.InvokeVoidAsync("alert", "Cannot delete Book / Author as it is included in a current existing Order");
        }


    }
    private void HandleDetails(int id)
    {

        navManager.NavigateTo("/AuthorDetails?" + admin.UserId + "+" + id);
    }

    private void HandleCreatePage()
    {
        navManager.NavigateTo("/AuthorCreate?" + admin.UserId);

    }

    private void HandleAdminPage()
    {
        navManager.NavigateTo("/Admin?" + admin.UserId);

    }
    private void HandleBookPage()
    {
        navManager.NavigateTo("/BookAdmin?" + admin.UserId);

    }
}
