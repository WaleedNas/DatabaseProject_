@page "/Admin"
@inject NavigationManager navManager
@inject IUserData userData
@inject IBookData bookData
@inject IJSRuntime JS

<PageTitle>VBStore</PageTitle>
@if (notAdmin)
{
    <h1>Unauthorized Access</h1>
} else
{
    <h1>Users</h1>
    <p>
        <NavLink style="margin:10px 0 20px 0" class="btn btn-primary" @onclick="HandleCreatePage">Add User</NavLink>
        <NavLink style="color:#040404; margin-left:70rem" class="btn btn-link" @onclick="HandleBookPage">Books</NavLink>
        <NavLink style="color:#040404;" class="btn btn-link" @onclick="HandleAuthorPage">Authors</NavLink>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>
                    Username
                </th>
                <th>
                    Email
                </th>
                <th>
                    Account Type
                </th>


                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (User user in users)
            {
                <tr>
                    <td>
                        @user.Username
                    </td>
                    <td>
                        @user.Email
                    </td>
                    <td>
                        @user.UserType
                    </td>
                    <td>
                        <NavLink class="btn btn-primary" @onclick="() => HandleEdit(user.UserId)">Edit</NavLink> |
                        <NavLink class="btn btn-primary" @onclick="() => HandleDetails(user.UserId)">Details</NavLink> |
                        <NavLink class="btn btn-danger" @onclick="() => HandleDelete(user.UserId)">Delete</NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}


@code {
    int Id;
    bool notAdmin = false;
    List<User> users = new List<User>();
    User admin = new User();

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);

        var queryString = uri.Query;

        if (!string.IsNullOrWhiteSpace(queryString))
        {
            Id = int.Parse(queryString.Substring(1));
        }

        try
        {
            admin = await userData.GetUser(Id);   
        }catch(Exception e)
        {}

        if (admin.UserType != UserType.Admin)
		{
			notAdmin = true;
		}

    }

    private void HandleEdit(int id)
    {
        navManager.NavigateTo("/UserEdit?" + admin.UserId + "+" + id);
    }
    private async Task HandleDelete(int id)
    {

        var response = await userData.DeleteUser(id);

        users = users.Where(user => user.UserId != id).ToList();

        // Manually trigger component render
        StateHasChanged();


    }
    private void HandleDetails(int id)
    {

        navManager.NavigateTo("/UserDetails?" + admin.UserId + "+" + id);
    }

    private void HandleCreatePage()
    {
        navManager.NavigateTo("/UserCreate?" + admin.UserId);

    }

    private void HandleBookPage()
    {
        navManager.NavigateTo("/BookAdmin?" + admin.UserId);

    }

    private void HandleAuthorPage()
    {
        navManager.NavigateTo("/AdminAuthor?" + admin.UserId);

    }

}
