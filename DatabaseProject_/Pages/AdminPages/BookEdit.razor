@page "/BookEdit"
@inject NavigationManager navManager
@inject IUserData userData
@inject IBookData bookData
@inject IJSRuntime JS


@if (notAdmin)
{
    <h1>Unauthorized Access</h1>
}
else
{
    <h1>Edit Book</h1>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="bookModel" method="post">
                <div class="group-left">
                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="@bookModel.Title" type="text" id="title" name="title" required />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputText @bind-Value="@bookModel.Description" type="text" id="desc" name="desc" required />
                    </div>
                    <div class="form-group">
                        <label>Publication Date</label>
                        <InputDate TValue="DateTime?" @bind-Value="@bookModel.PublicationDate" id="date" name="date" required />
                    </div>


                </div>
                <div class="group-right">

                    <div class="form-group">
                        <label>Price (AED)</label>
                        <InputNumber TValue="decimal" @bind-Value="@bookModel.Price" id="price" name="price" required />
                    </div>
                    <div class="form-group">
                        <label>Publisher</label>
                        <InputText @bind-Value="@bookModel.Publisher" typeof="text" id="pub" name="pub" required />
                    </div>
                    <div class="form-group">
                        <label>Quantity Available</label>
                        <InputNumber TValue="int" @bind-Value="@bookModel.QuantityAvailable" id="q" name="q" required />
                    </div>
                    <div class="form-group">
                        <label>Cover Image</label>
                        <InputFile OnChange="HandleFileSelection" />
                    </div>
                </div>
                <div class="form-group">
                    <input style="margin:10px 0 10px 0" type="submit" @onclick="HandleSubmit" value="Edit" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>

    <div>
        <a class="btn btn-primary" href="javascript: history.go(-1)">Back to List</a>
    </div>
}
@code {
    Book bookModel = new Book();
    User admin = new User();
    string message = "";
    int Id;
    int adminId;
    bool notAdmin = false;
    private IBrowserFile selectedFile;

    protected async override Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);

        var queryString = uri.Query;

        if (!string.IsNullOrWhiteSpace(queryString))
        {
            // Remove the "?" at the beginning
            queryString = queryString.Substring(1);

            // Split the remaining string using "+"
            var parts = queryString.Split('+');

            if (parts.Length == 2)
            {
                adminId = int.Parse(parts[0]);
                Id = int.Parse(parts[1]);

            }
        }

        try
        {
            admin = await userData.GetUser(adminId);
            bookModel = await bookData.GetBook(Id);
        }
        catch (Exception e)
        { }

        if (admin.UserType != UserType.Admin)
        {
            notAdmin = true;
        }

    }


    private async Task HandleSubmit()
    {
        try
        {
            var response = await bookData.UpdateBook(bookModel);

        }
        catch (Exception e)
        {
            message = "Book Update Error";
        }

        navManager.NavigateTo("/BookAdmin?" + admin.UserId);

    }

    async Task HandleFileSelection(InputFileChangeEventArgs eventArgs)
    {
        const int Max = 1;
        selectedFile = eventArgs.GetMultipleFiles(Max).FirstOrDefault();
        if (selectedFile != null)
        {
            
                try
                {
                    var img = await selectedFile.RequestImageFileAsync("image/jpeg", 130, 200);
                    byte[] imageBytes = new byte[img.Size];
                    var stream = img.OpenReadStream(int.MaxValue);
                    await stream.ReadAsync(imageBytes);

                    bookModel.CoverImage = imageBytes;

                } catch(Exception ex)
                {
                }
            
        }
    }



}
