@page "/BookAdmin"
@inject NavigationManager navManager
@inject IUserData userData
@inject IBookData bookData
@inject IJSRuntime JS

<PageTitle>VBStore</PageTitle>
@if (notAdmin)
{
    <h1>Unauthorized Access</h1>
} else
{
    <h1>Users</h1>

    <p>
        <a style="margin:10px 0 20px 0" class="btn btn-primary" asp-page="Create">Add User</a>
        <a style="color:#040404" class="btn btn-link" href="/Location/Index">Books</a>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>
                    Title
                </th>
                <th>
                    Price
                </th>
                <th>
                    Publishers
                </th>


                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Book book in books)
            {
                <tr>
                    <td>
                        @book.Title
                    </td>
                    <td>
                        @book.Price
                    </td>
                    <td>
                        @book.Publisher
                    </td>
                    <td>
                        <NavLink class="btn btn-primary" @onclick="() => HandleEdit(book.BookId)">Edit</NavLink> |
                        <NavLink class="btn btn-primary" @onclick="() => HandleDetails(book.BookId)">Details</NavLink> |
                        <NavLink class="btn btn-danger" @onclick="() => HandleDelete(book.BookId)">Delete</NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}


@code {
    int Id;
    bool notAdmin = false;
    List<Book> books = new List<Book>();

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);

        var queryString = uri.Query;

        //if (!string.IsNullOrWhiteSpace(queryString))
        //{
        //    Id = int.Parse(queryString.Substring(1));
        //}

        IEnumerable<Book> booksI = await bookData.GetBooks();
        books = booksI.ToList();


    }

    private void HandleEdit(int id)
    {
        navManager.NavigateTo("/BookEdit?" + id);
    }
    private async Task HandleDelete(int id)
    {

        var response = await bookData.DeleteBook(id);
       
        books = books.Where(book => book.BookId != id).ToList();

        // Manually trigger component render
        StateHasChanged();

        
    }
    private void HandleDetails(int id)
    {
        navManager.NavigateTo("/BookDetails?" + id);
    }

}
